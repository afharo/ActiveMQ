<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- START SNIPPET: example -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

 <!-- Allows accessing the server log -->
  <bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery"
        lazy-init="false" scope="singleton"
        init-method="start" destroy-method="stop">
  </bean>

  <!--
      The <broker> element is used to configure the ActiveMQ broker.
  -->
  <broker xmlns="http://activemq.apache.org/schema/core" brokerName="public-amq" dataDirectory="${activemq.data}" schedulePeriodForDestinationPurge="10000" start="false">

      <!--
        For better performances use VM cursor and small memory limit.
        For more information, see:

        http://activemq.apache.org/message-cursors.html

        Also, if your producer is "hanging", it's probably due to producer
        flow control.

        For more information, see:
        http://activemq.apache.org/producer-flow-control.html
      -->
      <destinationPolicy>
        <policyMap>
          <policyEntries>
            <policyEntry topic=">" >
                <!-- The constantPendingMessageLimitStrategy is used to prevent
                     slow topic consumers to block producers and affect other consumers
                     by limiting the number of messages that are retained
                     For more information, see:

                     http://activemq.apache.org/slow-consumer-handling.html

                -->
              <pendingMessageLimitStrategy>
                <constantPendingMessageLimitStrategy limit="1000"/>
              </pendingMessageLimitStrategy>
            </policyEntry>

            <!--
              Delete empty queues after 300s of inactivity

              http://activemq.apache.org/delete-inactive-destinations.html
            -->
            <policyEntry queue=">" gcInactiveDestinations="true" inactiveTimoutBeforeGC="300000">
              <deadLetterStrategy>
                <sharedDeadLetterStrategy processExpired="false" />
              </deadLetterStrategy>
            </policyEntry>
          </policyEntries>
        </policyMap>
      </destinationPolicy>


      <!--
          The managementContext is used to configure how ActiveMQ is exposed in
          JMX. By default, ActiveMQ uses the MBean server that is started by
          the JVM. For more information, see:

          http://activemq.apache.org/jmx.html
      -->
      <managementContext>
          <managementContext createConnector="false"/>
      </managementContext>

      <!--
          Configure message persistence for the broker.
          We decided to use LevelDB store (identified by the levelDB tag).
          As it has better performance compared to KahaDB
          For more information, see:

          http://activemq.apache.org/persistence.html
          http://activemq.apache.org/leveldb-store.html
      -->
      <persistenceAdapter>
        <levelDB directory="${activemq.data}/leveldb"/>
      </persistenceAdapter>


      <!--
        The systemUsage controls the maximum amount of space the broker will
        use before disabling caching and/or slowing down producers. For more information, see:
        http://activemq.apache.org/producer-flow-control.html
      -->
      <systemUsage>
        <systemUsage>
            <memoryUsage>
                <memoryUsage percentOfJvmHeap="70" />
            </memoryUsage>
            <storeUsage>
                <storeUsage limit="100 gb"/>
            </storeUsage>
            <tempUsage>
                <tempUsage limit="50 gb"/>
            </tempUsage>
        </systemUsage>
    </systemUsage>

    <!--
        The transport connectors expose ActiveMQ over a given protocol to
        clients and other brokers. For more information, see:

        http://activemq.apache.org/configuring-transports.html
    -->
    <transportConnectors>
      <transportConnector name="camel" uri="vm://0.0.0.0:61617?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
    </transportConnectors>

    <!-- destroy the spring context on shutdown to stop jetty -->
    <shutdownHooks>
        <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
    </shutdownHooks>

    <plugins>
      <!-- Autoload new config without restarting the service (good for developing) http://activemq.apache.org/runtime-configuration.html -->
      <runtimeConfigurationPlugin checkPeriod="1000" />

      <!--
          Enable the statisticsBrokerPlugin to allow ActiveMQ to collect
          statistics.
        -->
      <statisticsBrokerPlugin/>

      <!--
        Add expires header if it doesn't exists (TTL=24h)

        http://activemq.apache.org/timestampplugin.html
      -->
      <timeStampingBrokerPlugin zeroExpirationOverride="86400000" />

      <!--
        Drop all messages from Dead Letter Q

        http://activemq.apache.org/message-redelivery-and-dlq-handling.html
      -->
      <discardingDLQBrokerPlugin dropAll="true" dropTemporaryTopics="true" dropTemporaryQueues="true" />

      <!-- Enable logs -->
      <loggingBrokerPlugin logAll="true" logConnectionEvents="false"/>

    </plugins>
  </broker>

  <!--
      Enable web consoles, REST and Ajax APIs and demos
      The web consoles requires by default login, you can disable this in the jetty.xml file

      Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
  -->
  <import resource="jetty.xml"/>

  <!-- Import camel config for easy routing -->
  <import resource="camel.xml"/>

</beans>
<!-- END SNIPPET: example -->
